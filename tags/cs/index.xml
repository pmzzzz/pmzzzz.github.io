<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>CS - 标签 - 泡面zz的小屋</title><link>https://pmzzzt.eu.org/tags/cs/</link><description>CS - 标签 - 泡面zz的小屋</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zt_blog@outlook.com (泡面zz)</managingEditor><webMaster>zt_blog@outlook.com (泡面zz)</webMaster><lastBuildDate>Sun, 17 Mar 2024 20:41:43 +0800</lastBuildDate><atom:link href="https://pmzzzt.eu.org/tags/cs/" rel="self" type="application/rss+xml"/><item><title>002-两数相加</title><link>https://pmzzzt.eu.org/posts/leetcode/2/</link><pubDate>Sun, 17 Mar 2024 20:41:43 +0800</pubDate><author>泡面zz</author><guid>https://pmzzzt.eu.org/posts/leetcode/2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/1.png" referrerpolicy="no-referrer">
            </div>题目 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例 1：
输入：l1 = [2,4,3], l2 = [5,6,4] 输出：[7,0,8] 解释：342 + 465 = 807. 示例 2：
输入：l1 = [0], l2 = [0] 输出：[0] 示例 3：
输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] 输出：[8,9,9,9,0,0,0,1] 提示：
 每个链表中的节点数在范围 [1, 100] 内 0 &lt;= Node.val &lt;= 9 题目数据保证列表表示的数字不含前导零  解答 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) { struct ListNode *head = NULL,*tail = NULL; int carry = 0; int sum =0; while(l1 || l2){ if(!]]></description></item><item><title>001-两数之和</title><link>https://pmzzzt.eu.org/posts/leetcode/1/</link><pubDate>Sun, 17 Mar 2024 16:00:00 +0800</pubDate><author>泡面zz</author><guid>https://pmzzzt.eu.org/posts/leetcode/1/</guid><description><![CDATA[<div class="featured-image">
                <img src="/1.png" referrerpolicy="no-referrer">
            </div>使用hugo new content posts/LeetCode/2/index.md 来创建文章，可以使用模板，自动填充frontmatter
题目  题目链接
 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
示例 1：
输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 示例 2：
输入：nums = [3,2,4], target = 6 输出：[1,2] 示例 3：
输入：nums = [3,3], target = 6 输出：[0,1] 提示：
 2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 只会存在一个有效答案  解题 1暴力解题 直接两层循环，判断两数之和等于target之后就返回，时间复杂度为O(n2)]]></description></item><item><title>MissingSemester day3</title><link>https://pmzzzt.eu.org/posts/learning/missingsemester/day3/</link><pubDate>Sat, 06 Jan 2024 10:00:00 +0800</pubDate><author>泡面zz</author><guid>https://pmzzzt.eu.org/posts/learning/missingsemester/day3/</guid><description><![CDATA[<div class="featured-image">
                <img src="/1.png" referrerpolicy="no-referrer">
            </div>课程总结  vim 编辑器的设计思想 vim 编辑器的基本使用  重点内容 vim的哲学 vim 被称为多模态(modal)编辑器:它对于插入文字和操纵文字有不同的模式。Vim 是可编程的（可以使用 Vimscript 或者像 Python 一样的其他程序语言），Vim 的接口本身也是一个程序语言：键入操作（以及其助记名） 是命令，这些命令也是可组合的。Vim 避免了使用鼠标，因为那样太慢了；Vim 甚至避免用 上下左右键因为那样需要太多的手指移动。
vim的模式  Normal: for moving around a file and making edits Insert: for inserting text Replace: for replacing text Visual (plain, line, or block): for selecting blocks of text Command-line: for running a command  移动 movement 即光标的移动。在normal模式和Visual模式都能用。
 基本移动： hjkl &ndash;&gt; 左下上右 单词移动：w后一个单词的开始，b前一个单词的开始，e单词的结尾 行内移动：0行首，^首个非空字符,$行尾 屏幕移动： HML &ndash;&gt; 屏幕最高、中间、最低行 high，middle、low 翻页 ：&lt;C-D&gt;、&lt;C-U&gt; &mdash;&gt; 向上、向下翻页 文件 : G文件末尾，gg文件开头 (g is for go) 行号 ： {行号}G 去行号(23G),或者:{行号} 行内查找：t{char}、f{char}向后查找,T{char}、F{char}向前查找 【f到该字符上，t在该字符前面】  ,、;查找结果跳转&mdash;&gt;前、后   搜索: /{正则表达式}, n / N 用于导航匹配  选择 Selection 配合前面的移动来选择字符]]></description></item><item><title>MissingSemester day2</title><link>https://pmzzzt.eu.org/posts/learning/missingsemester/day2/</link><pubDate>Tue, 02 Jan 2024 21:00:00 +0800</pubDate><author>泡面zz</author><guid>https://pmzzzt.eu.org/posts/learning/missingsemester/day2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/1.png" referrerpolicy="no-referrer">
            </div>课程总结  shell脚本的基础知识，变量的使用以及shebang 常用工具的介绍，文件搜索工具和方法  重点内容 shell脚本 变量的定义和赋值 foo=bar 提示  空格在shell中十分敏感，切勿随意添加空格，如果写成 foo = bar它的意思是运行foo这个程序，第二和第三个参数分别为 = 和 bar，这明显不是我们想要的   变量的引用 echo $foo # 输出 bar 使用$来引用变量的值
单引号与双引号 foo=bar echo &#34;$foo&#34; # prints bar echo &#39;$foo&#39; # prints $foo 提示  从上面的例子可以看出，双引号会将其中的变量引用进行解释，而单引号是将其中的内容直接当作一个字符串。   特殊变量引用 若mcd.sh内容如下：
mcd () { mkdir -p &#34;$1&#34; cd &#34;$1&#34; } 该脚本的功能为 新建一个文件夹，然后自动cd进去
source mcd.sh mcd test 使用source file 将脚本的内容进行加载和执行，上面的例子即是将函数进行了加载
然后使用 mcd 命令来调用函数
 值得注意的是，在脚本中，我们使用了&quot;$1&quot;来表示接受到的第一个参数，在这个例子中，我们的参数是test,所以它会创建名为test的文件夹，然后cd进去
还有其他的特殊变量：]]></description></item><item><title>MissingSemester day1</title><link>https://pmzzzt.eu.org/posts/learning/missingsemester/day1/</link><pubDate>Wed, 27 Dec 2023 21:00:00 +0800</pubDate><author>泡面zz</author><guid>https://pmzzzt.eu.org/posts/learning/missingsemester/day1/</guid><description><![CDATA[<div class="featured-image">
                <img src="/1.png" referrerpolicy="no-referrer">
            </div>课程概览  本节课主要对整个课程进行了大致的描述，包括设置这门课的意义，以及内容安排。 讲解了SHELL的基本概念和特性，以及一些程序和符号的使用（man、ls、mkdir、｜、&lt;&gt;、etc..）  重点 什么是SHELL SHELL是文本交互界面，区别于图形化交互界面，SHELL通过文本与系统交互，比图形界面更能掌控我们的电脑
shell如何知道你要运行的程序在哪里 shell会通过一个特定的顺序（不同的文件夹目录）来搜寻程序，如果找到了就会运行找到的第一个程序
通过 $PATH 能观察shell的搜索路径，下面的例子通过echo将它打印了出来
另外，可以使用which 命令，来告诉你如果运行某个程序，它具体来自哪个目录,例如echo就来自于/bin/echo
missing:~$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin missing:~$ which echo /bin/echo missing:~$ /bin/echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 文件和文件夹的访问权限 使用ls -l ，显示文件夹下文件的详细信息，其中第一列代表了文件/文件夹的权限
missing:~$ ls -l /home drwxr-xr-x 1 missing users 4096 Jun 15 2019 missing  d代表这是一个文件夹 后续一共九个字符分为三组，每一组都是按照rwx(读、写、执行)的顺序排列，如果有权限则限制字母，反正则显示- 三组字母分别代表用户、组、其他人对该文件\文件夹的权限  tips  文件夹的执行，代表是否能够打开文件夹，文件夹的读，代表能否查看内容，文件夹的写，代表能否删除内部的文件   连接程序,重定向与管道 通过 &lt; ，&gt; ，| 可以将程序的输入输出流连接起来
首先要知道的是：对于一个程序来说，一般有输入流和输出流，例如从键盘输出，然后打印到屏幕上
(base) ➜ TheMissingSemester echo hello hello 使用&gt;&lt;符号将输入输出流重定向： missing:~$ echo hello &gt; hello.]]></description></item></channel></rss>